// WebSocket Framework

var ws;

function APLInit(){
   // ws = new WebSocket ('ws:://dyalog_root/'); 
   // ws = new WebSocket ('ws://localhost'); 
   
   ws = new WebSocket ('ws://'+location.hostname); 
   ws.onopen = function(evt) { onOpen(evt) };
   ws.onclose = function(evt) { onClose(evt) };
   ws.onmessage = function(evt) { onMessage(evt) };
   ws.onerror = function(evt) { onError(evt) };
   
   window.addEventListener ("resize",debounce((event) => sendAPLResize(event)));
      
 }
 
function  debounce (func, timeout = 100){
          let timer;
          return (...args) => {
          clearTimeout(timer);
          timer = setTimeout(()=>{func.apply(this,args);},timeout);
          };
}

function onClose(evt){
         console.log(evt);
}

function onError(evt){
         console.log(evt);
}

window.onload = APLInit;

function onOpen(evt){
         // ws.send ('{"Event": "WSOpen", "SessionID": sessionID}');
         ws.send (JSON.stringify({Event: "WSOpen", SessionID: sessionID}));
         window.dispatchEvent(new Event('resize'));
        }

function onMessage(evt){
         eval (evt.data);
   }  

function execCode(id,code) { 
         const b = {Event: "SJSR", id: id, result: eval(code) }; 
         const m = JSON.stringify(b); 
         ws.send (m)
}

function sendAPLResize(e){
       var b = {Event: e.type,
                  DataGrids: [] };
       const dg = Array.from (document.getElementsByClassName ('data-grid'));

            dg.forEach ((x)=>{
            b.DataGrids.push ({
               Id:x.id,
               Height:x.parentElement.clientHeight, 
               Width:x.parentElement.clientWidth,
               OffsetHeight: x.offsetHeight,
               OffsetWidth: x.offsetWidth,                  
              })
            })

      const m = JSON.stringify(b); 
      ws.send (m)
}

function sendAPLRequest(e){
      // const ce=[e.currentTarget.className,e.currentTarget.tagName,e.type,e.key].join();
      const ce=[e.target.tagName,e.type,e.key].join();
      const pd=PreventDefaultList.includes(ce);
      // alert (ce)
      if (pd){
                e.preventDefault();
       }     
      const r = e.target.getBoundingClientRect();
      const s = window.getComputedStyle(e.target);
      const b = {
                Event: e.type,
                Value: e.target.value,
                Name: e.target.name,
                TargetTag: e.target.tagName,
                CurrentTargetTag: e.currentTarget.tagName, 
                TargetId: e.target.id, 
                CurrentTargetId: e.currentTarget.id, 
                Key: e.key, 
                Repeat: e.repeat,
                CtrlKey: e.ctrlKey,
                AltKey: e.altKey,
                ShiftKey: e.shiftKey,
                MouseButton: e.button,
                SelectionStart: e.target.selectionStart,
                FontSize: s['font-size'],
                FontFamily: s['font-family'],
                Font: s['font'],
                Padding: s['padding'],
                BoundingClientRect: [r.top,r.left,r.bottom,r.right]
      };
      const m = JSON.stringify(b); 
      ws.send (m)
}

